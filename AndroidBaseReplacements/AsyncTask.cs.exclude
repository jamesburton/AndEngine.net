using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Runnable = Java.Lang.IRunnable;
using Thread = Java.Lang.Thread;

namespace AndroidBaseReplacements.Java.Util.Concurrent
{
    using ThreadPoolExecutor = Java.Util.Concurrent.ThreadPoolExecutor;
    using TimeUnit = Java.Util.Concurrent.TimeUnit;
    //using BlockingQueue = Java.Util.Concurrent.BlockingQueue;
    //using LinkedBlockingQueue = Java.Util.Concurrent.LinkedBlockingQueue;
    using ThreadFactory = Java.Util.Concurrent.ThreadFactory;
    //using Callable = Java.Util.Concurrent.Callable;
    //using FutureTask = Java.Util.Concurrent.FutureTask;
    using ExecutionException = Java.Util.Concurrent.ExecutionException;
    using TimeoutException = Java.Util.Concurrent.TimeoutException;
    using CancellationException = Java.Util.Concurrent.CancellationException;
    using AtomicInteger = Java.Util.Concurrent.atomic.AtomicInteger;

    using Handler = Android.OS.Handler;
    using Message = Android.OS.Message;
    using Process = Android.OS.Process;

    public abstract class AsyncTask<Params, Progress, Result>
    {
        private static readonly String LOG_TAG = "AsyncTask";

        private static /* final */ int CORE_POOL_SIZE = 1;
        private static /* final */ int MAXIMUM_POOL_SIZE = 10;
        private static /* final */ int KEEP_ALIVE = 10;

        //private static readonly BlockingQueue<Runnable> sWorkQueue;
        private static readonly Java.Util.Concurrent.BlockingQueue<Runnable> sWorkQueue;

        /*
        private static final ThreadFactory sThreadFactory = new ThreadFactory() {
            private final AtomicInteger mCount = new AtomicInteger(1);

            public Thread newThread(Runnable r) {
                return new Thread(r, "AsyncTask #" + mCount.getAndIncrement());
            }
        }; //*/
        private static readonly ThreadFactory sThreadFactory = new AsyncTaskThreadFactory();
        internal class AsyncTaskThreadFactory : ThreadFactory
        {
            private readonly AtomicInteger mCount = new AtomicInteger(1);

            public Thread NewThread(Runnable r)
            {
                return new Thread(r, "AsyncTask #" + mCount.GetAndIncrement());
            }
        }

        static AsyncTask()
        {
            sExecutor = new ThreadPoolExecutor(CORE_POOL_SIZE,
                MAXIMUM_POOL_SIZE, KEEP_ALIVE, TimeUnit.SECONDS, sWorkQueue, sThreadFactory);
            sWorkQueue =
                //new LinkedBlockingQueue<Runnable>(MAXIMUM_POOL_SIZE);
                new Java.Util.Concurrent.LinkedBlockingQueue<Runnable>(MAXIMUM_POOL_SIZE);
        }

        private static readonly ThreadPoolExecutor sExecutor;

        private static readonly int MESSAGE_POST_RESULT = 0x1;
        private static readonly int MESSAGE_POST_PROGRESS = 0x2;
        private static readonly int MESSAGE_POST_CANCEL = 0x3;

        private static readonly InternalHandler sHandler = new InternalHandler();

        private readonly WorkerRunnable<Params, Result> mWorker;
        //private readonly FutureTask<Result> mFuture;
        private readonly Java.Util.Concurrent.FutureTask<Result> mFuture;

        private volatile StatusEnum mStatus = StatusEnum.PENDING;

        /**
         * Indicates the current status of the task. Each status will be set only once
         * during the lifetime of a task.
         */
        public enum StatusEnum
        {
            /**
             * Indicates that the task has not been executed yet.
             */
            PENDING,
            /**
             * Indicates that the task is running.
             */
            RUNNING,
            /**
             * Indicates that {@link AsyncTask#onPostExecute} has finished.
             */
            FINISHED,
        }

        public class AsyncTaskWorkerRunnable : WorkerRunnable<Params, Result>
        {
            public Result Call() /* throws Exception */ {
                Process.SetThreadPriority(Android.OS.ThreadPriority.Background);
                return DoInBackground(mParams);
            }
        }

        //public class AsyncTaskFutureTask : FutureTask<Result>
        public class AsyncTaskFutureTask : Java.Util.Concurrent.FutureTask<Result>
        {
            readonly dynamic _this;
            readonly dynamic mWorker;
            public AsyncTaskFutureTask(dynamic _this, dynamic mWorker) : base(mWorker) { this._this = _this; }

            //@SuppressWarnings("unchecked")
            //@Override
            protected override void Done()
            {
                Message message;
                Result result = default(Result);

                try
                {
                    result = _this.Get();
                }
                catch (InterruptedException e)
                {
                    Android.Util.Log.Warn(LOG_TAG, e);
                }
                catch (ExecutionException e)
                {
                    throw new RuntimeException("An error occured while executing DoInBackground()",
                            e.Cause);
                }
                catch (CancellationException e)
                {
                    message = sHandler.ObtainMessage(MESSAGE_POST_CANCEL,
                            new AsyncTaskResult<Result>(_this, (Result[])null));
                    message.SendToTarget();
                    return;
                }
                catch (Throwable t)
                {
                    throw new RuntimeException("An error occured while executing "
                            + "DoInBackground()", t);
                }

                message = sHandler.ObtainMessage(MESSAGE_POST_RESULT,
                        new AsyncTaskResult<Result>(_this, result));
                message.SendToTarget();
            }
        }


        /**
         * Creates a new asynchronous task. This constructor must be invoked on the UI thread.
         */
        public AsyncTask()
        {
            mWorker = new AsyncTaskWorkerRunnable<Params, Result>();

            mFuture = new AsyncTaskFutureTask<Result>(mWorker);
        }

        /**
         * Returns the current status of this task.
         *
         * @return The current status.
         */
        public StatusEnum GetStatus()
        {
            return mStatus;
        }

        public StatusEnum Status { get { return GetStatus(); } }

        /**
         * Override this method to perform a computation on a background thread. The
         * specified parameters are the parameters passed to {@link #execute}
         * by the caller of this task.
         *
         * This method can call {@link #publishProgress} to publish updates
         * on the UI thread.
         *
         * @param params The parameters of the task.
         *
         * @return A result, defined by the subclass of this task.
         *
         * @see #onPreExecute()
         * @see #onPostExecute
         * @see #publishProgress
         */
        protected abstract Result DoInBackground(/*Params... params*/ params Params[] _params);

        /**
         * Runs on the UI thread before {@link #doInBackground}.
         *
         * @see #onPostExecute
         * @see #doInBackground
         */
        protected virtual void OnPreExecute()
        {
        }

        /**
         * Runs on the UI thread after {@link #doInBackground}. The
         * specified result is the value returned by {@link #doInBackground}
         * or null if the task was cancelled or an exception occured.
         *
         * @param result The result of the operation computed by {@link #doInBackground}.
         *
         * @see #onPreExecute
         * @see #doInBackground
         */
        protected virtual void OnPostExecute(Result result)
        {
        }

        /**
         * Runs on the UI thread after {@link #publishProgress} is invoked.
         * The specified values are the values passed to {@link #publishProgress}.
         *
         * @param values The values indicating progress.
         *
         * @see #publishProgress
         * @see #doInBackground
         */
        protected virtual void OnProgressUpdate(/*Progress... values*/ params Progress[] values)
        {
        }

        /**
         * Runs on the UI thread after {@link #cancel(boolean)} is invoked.
         *
         * @see #cancel(boolean)
         * @see #isCancelled()
         */
        protected virtual void OnCancelled()
        {
        }

        /**
         * Returns <tt>true</tt> if this task was cancelled before it completed
         * normally.
         *
         * @return <tt>true</tt> if task was cancelled before it completed
         *
         * @see #cancel(boolean)
         */
        public /* final */ bool IsCancelled()
        {
            return mFuture.IsCancelled();
        }

        public bool Cancelled { get { return IsCancelled(); } }

        /**
         * Attempts to cancel execution of this task.  This attempt will
         * fail if the task has already completed, already been cancelled,
         * or could not be cancelled for some other reason. If successful,
         * and this task has not started when <tt>cancel</tt> is called,
         * this task should never run.  If the task has already started,
         * then the <tt>mayInterruptIfRunning</tt> parameter determines
         * whether the thread executing this task should be interrupted in
         * an attempt to stop the task.
         *
         * @param mayInterruptIfRunning <tt>true</tt> if the thread executing this
         *        task should be interrupted; otherwise, in-progress tasks are allowed
         *        to complete.
         *
         * @return <tt>false</tt> if the task could not be cancelled,
         *         typically because it has already completed normally;
         *         <tt>true</tt> otherwise
         *
         * @see #isCancelled()
         * @see #onCancelled()
         */
        public bool Cancel(bool mayInterruptIfRunning)
        {
            return mFuture.Cancel(mayInterruptIfRunning);
        }

        /**
         * Waits if necessary for the computation to complete, and then
         * retrieves its result.
         *
         * @return The computed result.
         *
         * @throws CancellationException If the computation was cancelled.
         * @throws ExecutionException If the computation threw an exception.
         * @throws InterruptedException If the current thread was interrupted
         *         while waiting.
         */
        public Result Get() /* throws InterruptedException, ExecutionException */ {
            return mFuture.Get();
        }

        /**
         * Waits if necessary for at most the given time for the computation
         * to complete, and then retrieves its result.
         *
         * @param timeout Time to wait before cancelling the operation.
         * @param unit The time unit for the timeout.
         *
         * @return The computed result.
         *
         * @throws CancellationException If the computation was cancelled.
         * @throws ExecutionException If the computation threw an exception.
         * @throws InterruptedException If the current thread was interrupted
         *         while waiting.
         * @throws TimeoutException If the wait timed out.
         */
        public Result Get(long timeout, TimeUnit unit) /* throws InterruptedException ,
            ExecutionException, TimeoutException */ {
                                                        return mFuture.Get(timeout, unit);
                                                    }

        /**
         * Executes the task with the specified parameters. The task returns
         * itself (this) so that the caller can keep a reference to it.
         *
         * This method must be invoked on the UI thread.
         *
         * @param params The parameters of the task.
         *
         * @return This instance of AsyncTask.
         *
         * @throws IllegalStateException If {@link #getStatus()} returns either
         *         {@link AsyncTask.Status#RUNNING} or {@link AsyncTask.Status#FINISHED}.
         */
        public AsyncTask<Params, Progress, Result> Execute(/* Params... params */ params Params[] _params)
        {
            if (mStatus != StatusEnum.PENDING)
            {
                switch (mStatus)
                {
                    case StatusEnum.RUNNING:
                        throw new IllegalStateException("Cannot execute task:"
                                + " the task is already running.");
                    case StatusEnum.FINISHED:
                        throw new IllegalStateException("Cannot execute task:"
                                + " the task has already been executed "
                                + "(a task can be executed only once)");
                }
            }

            mStatus = StatusEnum.RUNNING;

            OnPreExecute();

            //mWorker.mParams = params;
            mWorker.mParams = _params;
            sExecutor.Execute(mFuture);

            return this;
        }

        /**
         * This method can be invoked from {@link #doInBackground} to
         * publish updates on the UI thread while the background computation is
         * still running. Each call to this method will trigger the execution of
         * {@link #onProgressUpdate} on the UI thread.
         *
         * @param values The progress values to update the UI with.
         *
         * @see #onProgressUpdate
         * @see #doInBackground
         */
        protected void PublishProgress(/*Progress... values*/ params Progress[] values)
        {
            sHandler.ObtainMessage(MESSAGE_POST_PROGRESS,
                    new AsyncTaskResult<Progress>(this, values)).SendToTarget();
        }

        private void Finish(Result result)
        {
            OnPostExecute(result);
            mStatus = Status.FINISHED;
        }

        public class InternalHandler : Handler
        {

            //@SuppressWarnings("unchecked")
            //@Override
            public override void HandleMessage(Message msg)
            {
                AsyncTaskResult<Data> result = (AsyncTaskResult<Data>)msg.obj;
                switch (msg.What)
                {
                    case MESSAGE_POST_RESULT:
                        // There is only one result
                        result.mTask.Finish(result.mData[0]);
                        break;
                    case MESSAGE_POST_PROGRESS:
                        result.mTask.OnProgressUpdate(result.mData);
                        break;
                    case MESSAGE_POST_CANCEL:
                        result.mTask.OnCancelled();
                        break;
                }
            }
        }

        public abstract class WorkerRunnable<Params2, Result2> : Java.Util.Concurrent.Callable<Result2>
        //private /* static */ abstract class WorkerRunnable<Params2, Result2> : Callable<Result2>
            where Params2 : Params
            where Result2 : Result
        {
            internal Params[] mParams;
        }

        private /* static */ class AsyncTaskResult<Data>
        {
            //@SuppressWarnings("unchecked")
            //readonly AsyncTask mTask;
            readonly dynamic mTask;
            readonly Data[] mData;

            //@SuppressWarnings("unchecked")
            //internal AsyncTaskResult(AsyncTask task, Data... data) {
            internal AsyncTaskResult(dynamic task, params Data[] data)
            {
                mTask = task;
                mData = data;
            }
        }
    }
}
